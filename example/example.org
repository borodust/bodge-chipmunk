#+PROPERTY: header-args :mkdirp yes
#+PROPERTY: header-args:lisp :results "output silent"
#+PROPERTY: header-args:glsl :results "none"

* bodge-chipmunk example

Here's how Chipmunk [[http://chipmunk-physics.net/release/ChipmunkLatest-Docs/#Intro-HelloChipmunk][example]] from the manual translates to Common Lisp using
=bodge-chipmunk=.

** C variant

#+BEGIN_SRC c :eval no
#include <stdio.h>
#include <chipmunk.h>

int main(void){
  // cpVect is a 2D vector and cpv() is a shortcut for initializing them.
  cpVect gravity = cpv(0, -100);

  // Create an empty space.
  cpSpace *space = cpSpaceNew();
  cpSpaceSetGravity(space, gravity);

  // Add a static line segment shape for the ground.
  // We'll make it slightly tilted so the ball will roll off.
  // We attach it to a static body to tell Chipmunk it shouldn't be movable.
  cpShape *ground = cpSegmentShapeNew(cpSpaceGetStaticBody(space), cpv(-20, 5), cpv(20, -5), 0);
  cpShapeSetFriction(ground, 1);
  cpSpaceAddShape(space, ground);

  // Now let's make a ball that falls onto the line and rolls off.
  // First we need to make a cpBody to hold the physical properties of the object.
  // These include the mass, position, velocity, angle, etc. of the object.
  // Then we attach collision shapes to the cpBody to give it a size and shape.

  cpFloat radius = 5;
  cpFloat mass = 1;

  // The moment of inertia is like mass for rotation
  // Use the cpMomentFor*() functions to help you approximate it.
  cpFloat moment = cpMomentForCircle(mass, 0, radius, cpvzero);

  // The cpSpaceAdd*() functions return the thing that you are adding.
  // It's convenient to create and add an object in one line.
  cpBody *ballBody = cpSpaceAddBody(space, cpBodyNew(mass, moment));
  cpBodySetPos(ballBody, cpv(0, 15));

  // Now we create the collision shape for the ball.
  // You can create multiple collision shapes that point to the same body.
  // They will all be attached to the body and move around to follow it.
  cpShape *ballShape = cpSpaceAddShape(space, cpCircleShapeNew(ballBody, radius, cpvzero));
  cpShapeSetFriction(ballShape, 0.7);

  // Now that it's all set up, we simulate all the objects in the space by
  // stepping forward through time in small increments called steps.
  // It is *highly* recommended to use a fixed size time step.
  cpFloat timeStep = 1.0/60.0;
  for(cpFloat time = 0; time < 2; time += timeStep){
    cpVect pos = cpBodyGetPosition(ballBody);
    cpVect vel = cpBodyGetVelocity(ballBody);
    printf(
      "Time is %5.2f. ballBody is at (%5.2f, %5.2f). It's velocity is (%5.2f, %5.2f)\n",
      time, pos.x, pos.y, vel.x, vel.y
    );

    cpSpaceStep(space, timeStep);
  }

  // Clean up our objects and exit!
  cpShapeFree(ballShape);
  cpBodyFree(ballBody);
  cpShapeFree(ground);
  cpSpaceFree(space);

  return 0;
}
#+END_SRC

** Common Lisp translation

/Note: I tried to translate =C= into =CL= as close as possible to the original
while using pure =CFFI=, so what you see below is totally not how idiomatic and
clean `CL` is written./

First, package for our symbols:
#+BEGIN_SRC lisp :tangle example.lisp
  (cl:defpackage :chipmunk.example
    (:use :cl :claw)
    (:export #:run))
#+END_SRC

Translated =main= function:
#+BEGIN_SRC lisp :tangle example.lisp
  (cl:in-package :chipmunk.example)

  (defun main ()
    ;; cpVect is a 2D vector and cpv() is a shortcut for initializing them.
    (cffi:with-foreign-object (gravity '%cp:vect)
      (cffi:with-foreign-slots ((%cp:x %cp:y) gravity %cp:vect)
        (setf %cp:x 0f0)
        (setf %cp:y -100f0))
      ;; Create an empty space.
      (let ((space (%cp:space-new)))
        (%cp:space-set-gravity space gravity)
        ;; Add a static line segment shape for the ground.
        ;; We'll make it slightly tilted so the ball will roll off.
        ;; We attach it to a static body to tell Chipmunk it shouldn't be movable.
        (cffi:with-foreign-objects ((a '%cp:vect)
                                    (b '%cp:vect))
          (cffi:with-foreign-slots ((%cp:x %cp:y) a %cp:vect)
            (setf %cp:x -20f0)
            (setf %cp:y 5f0))
          (cffi:with-foreign-slots ((%cp:x %cp:y) b %cp:vect)
            (setf %cp:x 20f0)
            (setf %cp:y -5f0))
          (let ((ground (%cp:segment-shape-new (%cp:space-get-static-body space)
                                               a b 0f0)))
            (%cp:shape-set-friction ground 1f0)
            (%cp:space-add-shape space ground)
            ;; Now let's make a ball that falls onto the line and rolls off.
            ;; First we need to make a cpBody to hold the physical properties of the object.
            ;; These include the mass, position, velocity, angle, etc. of the object.
            ;; Then we attach collision shapes to the cpBody to give it a size and shape.
            (let* ((radius 5f0)
                   (mass 1f0)
                   ;; The moment of inertia is like mass for rotation
                   ;; Use the cpMomentFor*() functions to help you approximate it.
                   (moment (%cp:moment-for-circle mass 0f0 radius cp:+vzero+))
                   ;; The cpSpaceAdd*() functions return the thing that you are adding.
                   ;; It's convenient to create and add an object in one line.
                   (ball-body (%cp:space-add-body space (%cp:body-new mass moment))))
              (cffi:with-foreign-object (pos '%chipmunk:vect)
                (cffi:with-foreign-slots ((%cp:x %cp:y) pos %cp:vect)
                  (setf %cp:x 0f0)
                  (setf %cp:y 15f0))
                (%cp:body-set-position ball-body pos))
              ;; Now we create the collision shape for the ball.
              ;; You can create multiple collision shapes that point to the same body.
              ;; They will all be attached to the body and move around to follow it.
              (let ((ball-shape (%cp:space-add-shape space
                                                     (%cp:circle-shape-new ball-body
                                                                           radius
                                                                           cp:+vzero+))))
                (%cp:shape-set-friction ball-shape 0.7f0)
                ;; Now that it's all set up, we simulate all the objects in the space by
                ;; stepping forward through time in small increments called steps.
                ;; It is *highly* recommended to use a fixed size time step.
                (let ((time-step (float 1/60 0f0)))
                  (loop for time = 0 then (incf time time-step) while (< time 2)
                        do (cffi:with-foreign-objects ((pos '%cp:vect)
                                                       (vel '%cp:vect))
                             (%cp:body-get-position pos ball-body)
                             (%cp:body-get-velocity vel ball-body)
                             (let (pos-x pos-y vel-x vel-y)
                               (cffi:with-foreign-slots ((%cp:x %cp:y) pos %cp:vect)
                                 (setf pos-x %cp:x
                                       pos-y %cp:y))
                               (cffi:with-foreign-slots ((%cp:x %cp:y) vel %cp:vect)
                                 (setf vel-x %cp:x
                                       vel-y %cp:y))
                               (format t "Time is ~5,2F. ball-body is at (~5,2F ~5,2F)). It's velocity is (~5,2F, ~5,2F)~&"
                                       time pos-x pos-y vel-x vel-y))
                             (%cp:space-step space time-step))))
                ;; Clean up our objects and exit!
                (%cp:shape-free ball-shape)
                (%cp:body-free ball-body)
                (%cp:shape-free ground)
                (%cp:space-free space))))))))
#+END_SRC

#+BEGIN_SRC lisp :tangle example.lisp
  (cl:in-package :chipmunk.example)

  (defun run ()
    ;; C code loves to throw around float interrupts around
    ;; but we don't like them to pop out in our world
    (float-features:with-float-traps-masked t
      (main)))

#+END_SRC

To run the example, evaluate in REPL:
#+BEGIN_SRC lisp :eval no
  ;; we need to load foreign foreign library into our image first
  (ql:quickload :chipmunk-blob)
  (chipmunk.example:run)
#+END_SRC
